'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _BaseLfo2 = require('../../core/BaseLfo');

var _BaseLfo3 = _interopRequireDefault(_BaseLfo2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var definitions = {
  min: {
    type: 'float',
    default: 0,
    min: -Infinity,
    max: +Infinity
  },
  max: {
    type: 'float',
    default: 1,
    min: -Infinity,
    max: +Infinity
  }
};

/**
 * Clip incomming according to given `min` and `max` parameters
 *
 * @param {Object} options - Override default paramters
 * @param {Number} [options.min=0] - Minimum value
 * @param {Number} [options.max=1] - Maximum value
 */

var Clip = function (_BaseLfo) {
  (0, _inherits3.default)(Clip, _BaseLfo);

  function Clip(options) {
    (0, _classCallCheck3.default)(this, Clip);
    return (0, _possibleConstructorReturn3.default)(this, (Clip.__proto__ || (0, _getPrototypeOf2.default)(Clip)).call(this, definitions, options));
  }

  (0, _createClass3.default)(Clip, [{
    key: 'inputVector',
    value: function inputVector(data) {
      var min = this.params.get('min');
      var max = this.params.get('max');
      var frameSize = this.streamParams.frameSize;
      var outData = this.frame.data;

      // @todo - could handle vector as min and max
      for (var i = 0; i < frameSize; i++) {
        outData[i] = Math.min(max, Math.max(min, data[i]));
      }return outData;
    }
  }, {
    key: 'processVector',
    value: function processVector(frame) {
      this.frame.data = this.inputVector(frame.data);
    }
  }, {
    key: 'inputSignal',
    value: function inputSignal(data) {
      var min = this.params.get('min');
      var max = this.params.get('max');
      var frameSize = this.streamParams.frameSize;
      var outData = this.frame.data;

      for (var i = 0; i < frameSize; i++) {
        outData[i] = Math.min(max, Math.max(min, data[i]));
      }return outData;
    }
  }, {
    key: 'processSignal',
    value: function processSignal(frame) {
      this.frame.data = this.inputSignal(frame.data);
    }
  }]);
  return Clip;
}(_BaseLfo3.default);

exports.default = Clip;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNsaXAuanMiXSwibmFtZXMiOlsiZGVmaW5pdGlvbnMiLCJtaW4iLCJ0eXBlIiwiZGVmYXVsdCIsIkluZmluaXR5IiwibWF4IiwiQ2xpcCIsIm9wdGlvbnMiLCJkYXRhIiwicGFyYW1zIiwiZ2V0IiwiZnJhbWVTaXplIiwic3RyZWFtUGFyYW1zIiwib3V0RGF0YSIsImZyYW1lIiwiaSIsIk1hdGgiLCJpbnB1dFZlY3RvciIsImlucHV0U2lnbmFsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7QUFFQSxJQUFNQSxjQUFjO0FBQ2xCQyxPQUFLO0FBQ0hDLFVBQU0sT0FESDtBQUVIQyxhQUFTLENBRk47QUFHSEYsU0FBSyxDQUFDRyxRQUhIO0FBSUhDLFNBQUssQ0FBQ0Q7QUFKSCxHQURhO0FBT2xCQyxPQUFLO0FBQ0hILFVBQU0sT0FESDtBQUVIQyxhQUFTLENBRk47QUFHSEYsU0FBSyxDQUFDRyxRQUhIO0FBSUhDLFNBQUssQ0FBQ0Q7QUFKSDtBQVBhLENBQXBCOztBQWVBOzs7Ozs7OztJQU9NRSxJOzs7QUFDSixnQkFBWUMsT0FBWixFQUFxQjtBQUFBO0FBQUEsNkhBQ2JQLFdBRGEsRUFDQU8sT0FEQTtBQUVwQjs7OztnQ0FFV0MsSSxFQUFNO0FBQ2hCLFVBQU1QLE1BQU0sS0FBS1EsTUFBTCxDQUFZQyxHQUFaLENBQWdCLEtBQWhCLENBQVo7QUFDQSxVQUFNTCxNQUFNLEtBQUtJLE1BQUwsQ0FBWUMsR0FBWixDQUFnQixLQUFoQixDQUFaO0FBQ0EsVUFBTUMsWUFBWSxLQUFLQyxZQUFMLENBQWtCRCxTQUFwQztBQUNBLFVBQU1FLFVBQVUsS0FBS0MsS0FBTCxDQUFXTixJQUEzQjs7QUFFQTtBQUNBLFdBQUssSUFBSU8sSUFBSSxDQUFiLEVBQWdCQSxJQUFJSixTQUFwQixFQUErQkksR0FBL0I7QUFDRUYsZ0JBQVFFLENBQVIsSUFBYUMsS0FBS2YsR0FBTCxDQUFTSSxHQUFULEVBQWNXLEtBQUtYLEdBQUwsQ0FBU0osR0FBVCxFQUFjTyxLQUFLTyxDQUFMLENBQWQsQ0FBZCxDQUFiO0FBREYsT0FHQSxPQUFPRixPQUFQO0FBQ0Q7OztrQ0FFYUMsSyxFQUFPO0FBQ25CLFdBQUtBLEtBQUwsQ0FBV04sSUFBWCxHQUFrQixLQUFLUyxXQUFMLENBQWlCSCxNQUFNTixJQUF2QixDQUFsQjtBQUNEOzs7Z0NBRVdBLEksRUFBTTtBQUNoQixVQUFNUCxNQUFNLEtBQUtRLE1BQUwsQ0FBWUMsR0FBWixDQUFnQixLQUFoQixDQUFaO0FBQ0EsVUFBTUwsTUFBTSxLQUFLSSxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsS0FBaEIsQ0FBWjtBQUNBLFVBQU1DLFlBQVksS0FBS0MsWUFBTCxDQUFrQkQsU0FBcEM7QUFDQSxVQUFNRSxVQUFVLEtBQUtDLEtBQUwsQ0FBV04sSUFBM0I7O0FBRUEsV0FBSyxJQUFJTyxJQUFJLENBQWIsRUFBZ0JBLElBQUlKLFNBQXBCLEVBQStCSSxHQUEvQjtBQUNFRixnQkFBUUUsQ0FBUixJQUFhQyxLQUFLZixHQUFMLENBQVNJLEdBQVQsRUFBY1csS0FBS1gsR0FBTCxDQUFTSixHQUFULEVBQWNPLEtBQUtPLENBQUwsQ0FBZCxDQUFkLENBQWI7QUFERixPQUdBLE9BQU9GLE9BQVA7QUFDRDs7O2tDQUVhQyxLLEVBQU87QUFDbkIsV0FBS0EsS0FBTCxDQUFXTixJQUFYLEdBQWtCLEtBQUtVLFdBQUwsQ0FBaUJKLE1BQU1OLElBQXZCLENBQWxCO0FBQ0Q7Ozs7O2tCQUdZRixJIiwiZmlsZSI6IkNsaXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzZUxmbyBmcm9tICcuLi8uLi9jb3JlL0Jhc2VMZm8nO1xuXG5jb25zdCBkZWZpbml0aW9ucyA9IHtcbiAgbWluOiB7XG4gICAgdHlwZTogJ2Zsb2F0JyxcbiAgICBkZWZhdWx0OiAwLFxuICAgIG1pbjogLUluZmluaXR5LFxuICAgIG1heDogK0luZmluaXR5LFxuICB9LFxuICBtYXg6IHtcbiAgICB0eXBlOiAnZmxvYXQnLFxuICAgIGRlZmF1bHQ6IDEsXG4gICAgbWluOiAtSW5maW5pdHksXG4gICAgbWF4OiArSW5maW5pdHksXG4gIH0sXG59O1xuXG4vKipcbiAqIENsaXAgaW5jb21taW5nIGFjY29yZGluZyB0byBnaXZlbiBgbWluYCBhbmQgYG1heGAgcGFyYW1ldGVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3ZlcnJpZGUgZGVmYXVsdCBwYXJhbXRlcnNcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5taW49MF0gLSBNaW5pbXVtIHZhbHVlXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMubWF4PTFdIC0gTWF4aW11bSB2YWx1ZVxuICovXG5jbGFzcyBDbGlwIGV4dGVuZHMgQmFzZUxmbyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBzdXBlcihkZWZpbml0aW9ucywgb3B0aW9ucyk7XG4gIH1cblxuICBpbnB1dFZlY3RvcihkYXRhKSB7XG4gICAgY29uc3QgbWluID0gdGhpcy5wYXJhbXMuZ2V0KCdtaW4nKTtcbiAgICBjb25zdCBtYXggPSB0aGlzLnBhcmFtcy5nZXQoJ21heCcpO1xuICAgIGNvbnN0IGZyYW1lU2l6ZSA9IHRoaXMuc3RyZWFtUGFyYW1zLmZyYW1lU2l6ZTtcbiAgICBjb25zdCBvdXREYXRhID0gdGhpcy5mcmFtZS5kYXRhO1xuXG4gICAgLy8gQHRvZG8gLSBjb3VsZCBoYW5kbGUgdmVjdG9yIGFzIG1pbiBhbmQgbWF4XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZVNpemU7IGkrKylcbiAgICAgIG91dERhdGFbaV0gPSBNYXRoLm1pbihtYXgsIE1hdGgubWF4KG1pbiwgZGF0YVtpXSkpO1xuXG4gICAgcmV0dXJuIG91dERhdGE7XG4gIH1cblxuICBwcm9jZXNzVmVjdG9yKGZyYW1lKSB7XG4gICAgdGhpcy5mcmFtZS5kYXRhID0gdGhpcy5pbnB1dFZlY3RvcihmcmFtZS5kYXRhKTtcbiAgfVxuXG4gIGlucHV0U2lnbmFsKGRhdGEpIHtcbiAgICBjb25zdCBtaW4gPSB0aGlzLnBhcmFtcy5nZXQoJ21pbicpO1xuICAgIGNvbnN0IG1heCA9IHRoaXMucGFyYW1zLmdldCgnbWF4Jyk7XG4gICAgY29uc3QgZnJhbWVTaXplID0gdGhpcy5zdHJlYW1QYXJhbXMuZnJhbWVTaXplO1xuICAgIGNvbnN0IG91dERhdGEgPSB0aGlzLmZyYW1lLmRhdGE7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZyYW1lU2l6ZTsgaSsrKVxuICAgICAgb3V0RGF0YVtpXSA9IE1hdGgubWluKG1heCwgTWF0aC5tYXgobWluLCBkYXRhW2ldKSk7XG5cbiAgICByZXR1cm4gb3V0RGF0YTtcbiAgfVxuXG4gIHByb2Nlc3NTaWduYWwoZnJhbWUpIHtcbiAgICB0aGlzLmZyYW1lLmRhdGEgPSB0aGlzLmlucHV0U2lnbmFsKGZyYW1lLmRhdGEpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsaXA7XG4iXX0=