'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _BaseLfo2 = require('../../core/BaseLfo');

var _BaseLfo3 = _interopRequireDefault(_BaseLfo2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var definitions = {
  type: {
    type: 'enum',
    list: ['linear'],
    default: 'linear',
    metas: {
      kind: 'dynamic'
    }
  },
  inputMin: {
    type: 'float',
    default: 0,
    min: -Infinity,
    max: +Infinity,
    metas: {
      kind: 'dynamic'
    }
  },
  inputMax: {
    type: 'float',
    default: 1,
    min: -Infinity,
    max: +Infinity,
    metas: {
      kind: 'dynamic'
    }
  },
  outputMin: {
    type: 'float',
    default: 1,
    min: -Infinity,
    max: +Infinity,
    metas: {
      kind: 'dynamic'
    }
  },
  outputMax: {
    type: 'float',
    default: 1,
    min: -Infinity,
    max: +Infinity,
    metas: {
      kind: 'dynamic'
    }
  }

  /**
   * Apply a linear scale on the incomming stream. The output is not clipped.
   *
   * @todo - implement log and exp scale
   *
   * @param {Object} options - Override default options
   * @param {Number} [options.inputMin=0] - Input Minimum
   * @param {Number} [options.inputMax=1] - Input Maximum
   * @param {Number} [options.outputMin=0] - Output Minimum
   * @param {Number} [options.outputMax=1] - Output Maximum
   */
};
var Scale = function (_BaseLfo) {
  (0, _inherits3.default)(Scale, _BaseLfo);

  function Scale(options) {
    (0, _classCallCheck3.default)(this, Scale);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Scale.__proto__ || (0, _getPrototypeOf2.default)(Scale)).call(this, definitions, options));

    _this.scale = null;
    return _this;
  }

  /** @private */


  (0, _createClass3.default)(Scale, [{
    key: '_setScaleFunction',
    value: function _setScaleFunction() {
      var inputMin = this.params.get('inputMin');
      var inputMax = this.params.get('inputMax');
      var outputMin = this.params.get('outputMin');
      var outputMax = this.params.get('outputMax');

      var a = (outputMax - outputMin) / (inputMax - inputMin);
      var b = outputMin - a * inputMin;

      this.scale = function (x) {
        return a * x + b;
      };
    }

    /** @private */

  }, {
    key: 'onParamUpdate',
    value: function onParamUpdate(name, value, metas) {
      (0, _get3.default)(Scale.prototype.__proto__ || (0, _getPrototypeOf2.default)(Scale.prototype), 'onParamUpdate', this).call(this, name, value, metas);

      if (name !== 'type') this._setScaleFunction();
    }

    /** @private */

  }, {
    key: 'processStreamParams',
    value: function processStreamParams(prevStreamParams) {
      this.prepareStreamParams(prevStreamParams);

      this._setScaleFunction();

      this.propagateStreamParams();
    }
  }, {
    key: 'inputVector',
    value: function inputVector(data) {
      var outData = this.frame.data;
      var frameSize = this.streamParams.frameSize;
      var scale = this.scale;

      for (var i = 0; i < frameSize; i++) {
        outData[i] = scale(data[i]);
      }return outData;
    }

    /** @private */

  }, {
    key: 'processVector',
    value: function processVector(frame) {
      this.frame.data = this.inputVector(frame.data);
    }
  }, {
    key: 'inputSignal',
    value: function inputSignal(data) {
      var outData = this.frame.data;
      var frameSize = this.streamParams.frameSize;
      var scale = this.scale;

      for (var i = 0; i < frameSize; i++) {
        outData[i] = scale(data[i]);
      }return outData;
    }

    /** @private */

  }, {
    key: 'processSignal',
    value: function processSignal(frame) {
      this.frame.data = this.inputVector(frame.data);
    }
  }]);
  return Scale;
}(_BaseLfo3.default);

exports.default = Scale;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjYWxlLmpzIl0sIm5hbWVzIjpbImRlZmluaXRpb25zIiwidHlwZSIsImxpc3QiLCJkZWZhdWx0IiwibWV0YXMiLCJraW5kIiwiaW5wdXRNaW4iLCJtaW4iLCJJbmZpbml0eSIsIm1heCIsImlucHV0TWF4Iiwib3V0cHV0TWluIiwib3V0cHV0TWF4IiwiU2NhbGUiLCJvcHRpb25zIiwic2NhbGUiLCJwYXJhbXMiLCJnZXQiLCJhIiwiYiIsIngiLCJuYW1lIiwidmFsdWUiLCJfc2V0U2NhbGVGdW5jdGlvbiIsInByZXZTdHJlYW1QYXJhbXMiLCJwcmVwYXJlU3RyZWFtUGFyYW1zIiwicHJvcGFnYXRlU3RyZWFtUGFyYW1zIiwiZGF0YSIsIm91dERhdGEiLCJmcmFtZSIsImZyYW1lU2l6ZSIsInN0cmVhbVBhcmFtcyIsImkiLCJpbnB1dFZlY3RvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7OztBQUVBLElBQU1BLGNBQWM7QUFDbEJDLFFBQU07QUFDSkEsVUFBTSxNQURGO0FBRUpDLFVBQU0sQ0FBQyxRQUFELENBRkY7QUFHSkMsYUFBUyxRQUhMO0FBSUpDLFdBQU87QUFDTEMsWUFBTTtBQUREO0FBSkgsR0FEWTtBQVNsQkMsWUFBVTtBQUNSTCxVQUFNLE9BREU7QUFFUkUsYUFBUyxDQUZEO0FBR1JJLFNBQUssQ0FBQ0MsUUFIRTtBQUlSQyxTQUFLLENBQUNELFFBSkU7QUFLUkosV0FBTztBQUNMQyxZQUFNO0FBREQ7QUFMQyxHQVRRO0FBa0JsQkssWUFBVTtBQUNSVCxVQUFNLE9BREU7QUFFUkUsYUFBUyxDQUZEO0FBR1JJLFNBQUssQ0FBQ0MsUUFIRTtBQUlSQyxTQUFLLENBQUNELFFBSkU7QUFLUkosV0FBTztBQUNMQyxZQUFNO0FBREQ7QUFMQyxHQWxCUTtBQTJCbEJNLGFBQVc7QUFDVFYsVUFBTSxPQURHO0FBRVRFLGFBQVMsQ0FGQTtBQUdUSSxTQUFLLENBQUNDLFFBSEc7QUFJVEMsU0FBSyxDQUFDRCxRQUpHO0FBS1RKLFdBQU87QUFDTEMsWUFBTTtBQUREO0FBTEUsR0EzQk87QUFvQ2xCTyxhQUFXO0FBQ1RYLFVBQU0sT0FERztBQUVURSxhQUFTLENBRkE7QUFHVEksU0FBSyxDQUFDQyxRQUhHO0FBSVRDLFNBQUssQ0FBQ0QsUUFKRztBQUtUSixXQUFPO0FBQ0xDLFlBQU07QUFERDtBQUxFOztBQVdiOzs7Ozs7Ozs7OztBQS9Db0IsQ0FBcEI7SUEwRE1RLEs7OztBQUNKLGlCQUFZQyxPQUFaLEVBQXFCO0FBQUE7O0FBQUEsb0lBQ2JkLFdBRGEsRUFDQWMsT0FEQTs7QUFHbkIsVUFBS0MsS0FBTCxHQUFhLElBQWI7QUFIbUI7QUFJcEI7O0FBRUQ7Ozs7O3dDQUNvQjtBQUNsQixVQUFNVCxXQUFXLEtBQUtVLE1BQUwsQ0FBWUMsR0FBWixDQUFnQixVQUFoQixDQUFqQjtBQUNBLFVBQU1QLFdBQVcsS0FBS00sTUFBTCxDQUFZQyxHQUFaLENBQWdCLFVBQWhCLENBQWpCO0FBQ0EsVUFBTU4sWUFBWSxLQUFLSyxNQUFMLENBQVlDLEdBQVosQ0FBZ0IsV0FBaEIsQ0FBbEI7QUFDQSxVQUFNTCxZQUFZLEtBQUtJLE1BQUwsQ0FBWUMsR0FBWixDQUFnQixXQUFoQixDQUFsQjs7QUFFQSxVQUFNQyxJQUFJLENBQUNOLFlBQVlELFNBQWIsS0FBMkJELFdBQVdKLFFBQXRDLENBQVY7QUFDQSxVQUFNYSxJQUFJUixZQUFZTyxJQUFJWixRQUExQjs7QUFFQSxXQUFLUyxLQUFMLEdBQWEsVUFBQ0ssQ0FBRDtBQUFBLGVBQU9GLElBQUlFLENBQUosR0FBUUQsQ0FBZjtBQUFBLE9BQWI7QUFDRDs7QUFFRDs7OztrQ0FDY0UsSSxFQUFNQyxLLEVBQU9sQixLLEVBQU87QUFDaEMsd0lBQW9CaUIsSUFBcEIsRUFBMEJDLEtBQTFCLEVBQWlDbEIsS0FBakM7O0FBRUEsVUFBSWlCLFNBQVMsTUFBYixFQUNFLEtBQUtFLGlCQUFMO0FBQ0g7O0FBRUQ7Ozs7d0NBQ29CQyxnQixFQUFrQjtBQUNwQyxXQUFLQyxtQkFBTCxDQUF5QkQsZ0JBQXpCOztBQUVBLFdBQUtELGlCQUFMOztBQUVBLFdBQUtHLHFCQUFMO0FBQ0Q7OztnQ0FFV0MsSSxFQUFNO0FBQ2hCLFVBQU1DLFVBQVUsS0FBS0MsS0FBTCxDQUFXRixJQUEzQjtBQUNBLFVBQU1HLFlBQVksS0FBS0MsWUFBTCxDQUFrQkQsU0FBcEM7QUFDQSxVQUFNZixRQUFRLEtBQUtBLEtBQW5COztBQUVBLFdBQUssSUFBSWlCLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsU0FBcEIsRUFBK0JFLEdBQS9CO0FBQ0VKLGdCQUFRSSxDQUFSLElBQWFqQixNQUFNWSxLQUFLSyxDQUFMLENBQU4sQ0FBYjtBQURGLE9BR0EsT0FBT0osT0FBUDtBQUNEOztBQUVEOzs7O2tDQUNjQyxLLEVBQU87QUFDbkIsV0FBS0EsS0FBTCxDQUFXRixJQUFYLEdBQWtCLEtBQUtNLFdBQUwsQ0FBaUJKLE1BQU1GLElBQXZCLENBQWxCO0FBQ0Q7OztnQ0FFV0EsSSxFQUFNO0FBQ2hCLFVBQU1DLFVBQVUsS0FBS0MsS0FBTCxDQUFXRixJQUEzQjtBQUNBLFVBQU1HLFlBQVksS0FBS0MsWUFBTCxDQUFrQkQsU0FBcEM7QUFDQSxVQUFNZixRQUFRLEtBQUtBLEtBQW5COztBQUVBLFdBQUssSUFBSWlCLElBQUksQ0FBYixFQUFnQkEsSUFBSUYsU0FBcEIsRUFBK0JFLEdBQS9CO0FBQ0VKLGdCQUFRSSxDQUFSLElBQWFqQixNQUFNWSxLQUFLSyxDQUFMLENBQU4sQ0FBYjtBQURGLE9BR0EsT0FBT0osT0FBUDtBQUNEOztBQUVEOzs7O2tDQUNjQyxLLEVBQU87QUFDbkIsV0FBS0EsS0FBTCxDQUFXRixJQUFYLEdBQWtCLEtBQUtNLFdBQUwsQ0FBaUJKLE1BQU1GLElBQXZCLENBQWxCO0FBQ0Q7Ozs7O2tCQUdZZCxLIiwiZmlsZSI6IlNjYWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2VMZm8gZnJvbSAnLi4vLi4vY29yZS9CYXNlTGZvJztcblxuY29uc3QgZGVmaW5pdGlvbnMgPSB7XG4gIHR5cGU6IHtcbiAgICB0eXBlOiAnZW51bScsXG4gICAgbGlzdDogWydsaW5lYXInXSxcbiAgICBkZWZhdWx0OiAnbGluZWFyJyxcbiAgICBtZXRhczoge1xuICAgICAga2luZDogJ2R5bmFtaWMnLFxuICAgIH1cbiAgfSxcbiAgaW5wdXRNaW46IHtcbiAgICB0eXBlOiAnZmxvYXQnLFxuICAgIGRlZmF1bHQ6IDAsXG4gICAgbWluOiAtSW5maW5pdHksXG4gICAgbWF4OiArSW5maW5pdHksXG4gICAgbWV0YXM6IHtcbiAgICAgIGtpbmQ6ICdkeW5hbWljJyxcbiAgICB9LFxuICB9LFxuICBpbnB1dE1heDoge1xuICAgIHR5cGU6ICdmbG9hdCcsXG4gICAgZGVmYXVsdDogMSxcbiAgICBtaW46IC1JbmZpbml0eSxcbiAgICBtYXg6ICtJbmZpbml0eSxcbiAgICBtZXRhczoge1xuICAgICAga2luZDogJ2R5bmFtaWMnLFxuICAgIH0sXG4gIH0sXG4gIG91dHB1dE1pbjoge1xuICAgIHR5cGU6ICdmbG9hdCcsXG4gICAgZGVmYXVsdDogMSxcbiAgICBtaW46IC1JbmZpbml0eSxcbiAgICBtYXg6ICtJbmZpbml0eSxcbiAgICBtZXRhczoge1xuICAgICAga2luZDogJ2R5bmFtaWMnLFxuICAgIH0sXG4gIH0sXG4gIG91dHB1dE1heDoge1xuICAgIHR5cGU6ICdmbG9hdCcsXG4gICAgZGVmYXVsdDogMSxcbiAgICBtaW46IC1JbmZpbml0eSxcbiAgICBtYXg6ICtJbmZpbml0eSxcbiAgICBtZXRhczoge1xuICAgICAga2luZDogJ2R5bmFtaWMnLFxuICAgIH0sXG4gIH0sXG59XG5cbi8qKlxuICogQXBwbHkgYSBsaW5lYXIgc2NhbGUgb24gdGhlIGluY29tbWluZyBzdHJlYW0uIFRoZSBvdXRwdXQgaXMgbm90IGNsaXBwZWQuXG4gKlxuICogQHRvZG8gLSBpbXBsZW1lbnQgbG9nIGFuZCBleHAgc2NhbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIE92ZXJyaWRlIGRlZmF1bHQgb3B0aW9uc1xuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmlucHV0TWluPTBdIC0gSW5wdXQgTWluaW11bVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmlucHV0TWF4PTFdIC0gSW5wdXQgTWF4aW11bVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLm91dHB1dE1pbj0wXSAtIE91dHB1dCBNaW5pbXVtXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMub3V0cHV0TWF4PTFdIC0gT3V0cHV0IE1heGltdW1cbiAqL1xuY2xhc3MgU2NhbGUgZXh0ZW5kcyBCYXNlTGZvIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIHN1cGVyKGRlZmluaXRpb25zLCBvcHRpb25zKTtcblxuICAgIHRoaXMuc2NhbGUgPSBudWxsO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIF9zZXRTY2FsZUZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGlucHV0TWluID0gdGhpcy5wYXJhbXMuZ2V0KCdpbnB1dE1pbicpO1xuICAgIGNvbnN0IGlucHV0TWF4ID0gdGhpcy5wYXJhbXMuZ2V0KCdpbnB1dE1heCcpO1xuICAgIGNvbnN0IG91dHB1dE1pbiA9IHRoaXMucGFyYW1zLmdldCgnb3V0cHV0TWluJyk7XG4gICAgY29uc3Qgb3V0cHV0TWF4ID0gdGhpcy5wYXJhbXMuZ2V0KCdvdXRwdXRNYXgnKTtcblxuICAgIGNvbnN0IGEgPSAob3V0cHV0TWF4IC0gb3V0cHV0TWluKSAvIChpbnB1dE1heCAtIGlucHV0TWluKTtcbiAgICBjb25zdCBiID0gb3V0cHV0TWluIC0gYSAqIGlucHV0TWluO1xuXG4gICAgdGhpcy5zY2FsZSA9ICh4KSA9PiBhICogeCArIGI7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgb25QYXJhbVVwZGF0ZShuYW1lLCB2YWx1ZSwgbWV0YXMpIHtcbiAgICBzdXBlci5vblBhcmFtVXBkYXRlKG5hbWUsIHZhbHVlLCBtZXRhcyk7XG5cbiAgICBpZiAobmFtZSAhPT0gJ3R5cGUnKVxuICAgICAgdGhpcy5fc2V0U2NhbGVGdW5jdGlvbigpO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIHByb2Nlc3NTdHJlYW1QYXJhbXMocHJldlN0cmVhbVBhcmFtcykge1xuICAgIHRoaXMucHJlcGFyZVN0cmVhbVBhcmFtcyhwcmV2U3RyZWFtUGFyYW1zKTtcblxuICAgIHRoaXMuX3NldFNjYWxlRnVuY3Rpb24oKTtcblxuICAgIHRoaXMucHJvcGFnYXRlU3RyZWFtUGFyYW1zKCk7XG4gIH1cblxuICBpbnB1dFZlY3RvcihkYXRhKSB7XG4gICAgY29uc3Qgb3V0RGF0YSA9IHRoaXMuZnJhbWUuZGF0YTtcbiAgICBjb25zdCBmcmFtZVNpemUgPSB0aGlzLnN0cmVhbVBhcmFtcy5mcmFtZVNpemU7XG4gICAgY29uc3Qgc2NhbGUgPSB0aGlzLnNjYWxlO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFtZVNpemU7IGkrKylcbiAgICAgIG91dERhdGFbaV0gPSBzY2FsZShkYXRhW2ldKTtcblxuICAgIHJldHVybiBvdXREYXRhO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIHByb2Nlc3NWZWN0b3IoZnJhbWUpIHtcbiAgICB0aGlzLmZyYW1lLmRhdGEgPSB0aGlzLmlucHV0VmVjdG9yKGZyYW1lLmRhdGEpO1xuICB9XG5cbiAgaW5wdXRTaWduYWwoZGF0YSkge1xuICAgIGNvbnN0IG91dERhdGEgPSB0aGlzLmZyYW1lLmRhdGE7XG4gICAgY29uc3QgZnJhbWVTaXplID0gdGhpcy5zdHJlYW1QYXJhbXMuZnJhbWVTaXplO1xuICAgIGNvbnN0IHNjYWxlID0gdGhpcy5zY2FsZTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJhbWVTaXplOyBpKyspXG4gICAgICBvdXREYXRhW2ldID0gc2NhbGUoZGF0YVtpXSk7XG5cbiAgICByZXR1cm4gb3V0RGF0YTtcbiAgfVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBwcm9jZXNzU2lnbmFsKGZyYW1lKSB7XG4gICAgdGhpcy5mcmFtZS5kYXRhID0gdGhpcy5pbnB1dFZlY3RvcihmcmFtZS5kYXRhKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTY2FsZTtcbiJdfQ==