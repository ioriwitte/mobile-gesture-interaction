'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _BaseLfo2 = require('../../core/BaseLfo');

var _BaseLfo3 = _interopRequireDefault(_BaseLfo2);

var _wsUtils = require('../../common/utils/wsUtils');

var _wsServerFactory = require('../utils/wsServerFactory');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parameters = {
  port: {
    type: 'integer',
    default: 8000,
    constant: true,
    nullable: true
  },
  server: {
    type: 'any',
    default: null,
    constant: true,
    nullable: true
  }
};

/**
 * Receive an lfo frame as a socket message from a `client.sink.SocketSend`
 * instance.
 *
 * <p class="warning">Experimental</p>

 * @memberof module:node.source
 *
 * @params {Object} options
 *
 * @example
 * const socket = new lfo.source.SocketReceive({ port: 8000 });
 * const logger = new lfo.sink.Logger({
 *   time: true,
 *   data: true,
 * });
 *
 * socket.connect(logger);
 */

var SocketReceive = function (_BaseLfo) {
  (0, _inherits3.default)(SocketReceive, _BaseLfo);

  function SocketReceive() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, SocketReceive);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SocketReceive.__proto__ || (0, _getPrototypeOf2.default)(SocketReceive)).call(this, parameters, options));

    _this._onConnection = _this._onConnection.bind(_this);
    _this._dispatch = _this._dispatch.bind(_this);

    _this.wss = (0, _wsServerFactory.wsServerFactory)({
      port: _this.params.get('port'),
      server: _this.params.get('server')
    });

    _this.wss.on('connection', _this._onConnection);
    return _this;
  }

  /** @private */


  (0, _createClass3.default)(SocketReceive, [{
    key: 'initModule',
    value: function initModule(socket) {
      var promises = this.nextModules.map(function (mod) {
        return mod.initModule();
      });
      // wait for children promises and send INIT_MODULE_ACK
      _promise2.default.all(promises).then(function () {
        var buffer = _wsUtils.encoders.initModuleAck();
        socket.send(buffer);
      });
    }

    // process any type
    /** @private */

  }, {
    key: 'processScalar',
    value: function processScalar() {}
    /** @private */

  }, {
    key: 'processVector',
    value: function processVector() {}
    /** @private */

  }, {
    key: 'processSignal',
    value: function processSignal() {}

    /** @private */

  }, {
    key: 'processFrame',
    value: function processFrame(frame) {
      this.prepareFrame();
      this.frame = frame;
      this.propagateFrame();
    }

    /** @private */

  }, {
    key: '_onConnection',
    value: function _onConnection(socket) {
      socket.on('message', this._dispatch(socket));
    }

    /**
     * Decode and dispatch incomming frame according to opcode
     * @private
     */

  }, {
    key: '_dispatch',
    value: function _dispatch(socket) {
      var _this2 = this;

      return function (arrayBuffer) {
        var opcode = _wsUtils.decoders.opcode(arrayBuffer);

        switch (opcode) {
          case _wsUtils.opcodes.INIT_MODULE_REQ:
            _this2.initModule(socket);
            break;
          case _wsUtils.opcodes.PROCESS_STREAM_PARAMS:
            var prevStreamParams = _wsUtils.decoders.streamParams(arrayBuffer);
            _this2.processStreamParams(prevStreamParams);
            break;
          case _wsUtils.opcodes.RESET_STREAM:
            _this2.resetStream();
            break;
          case _wsUtils.opcodes.FINALIZE_STREAM:
            var endTime = _wsUtils.decoders.finalizeStream(arrayBuffer);
            _this2.finalizeStream(endTime);
            break;
          case _wsUtils.opcodes.PROCESS_FRAME:
            var frameSize = _this2.streamParams.frameSize;
            var frame = _wsUtils.decoders.processFrame(arrayBuffer, frameSize);
            _this2.processFrame(frame);
            break;
        }
      };
    }
  }]);
  return SocketReceive;
}(_BaseLfo3.default);

exports.default = SocketReceive;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNvY2tldFJlY2VpdmUuanMiXSwibmFtZXMiOlsicGFyYW1ldGVycyIsInBvcnQiLCJ0eXBlIiwiZGVmYXVsdCIsImNvbnN0YW50IiwibnVsbGFibGUiLCJzZXJ2ZXIiLCJTb2NrZXRSZWNlaXZlIiwib3B0aW9ucyIsIl9vbkNvbm5lY3Rpb24iLCJiaW5kIiwiX2Rpc3BhdGNoIiwid3NzIiwicGFyYW1zIiwiZ2V0Iiwib24iLCJzb2NrZXQiLCJwcm9taXNlcyIsIm5leHRNb2R1bGVzIiwibWFwIiwibW9kIiwiaW5pdE1vZHVsZSIsImFsbCIsInRoZW4iLCJidWZmZXIiLCJpbml0TW9kdWxlQWNrIiwic2VuZCIsImZyYW1lIiwicHJlcGFyZUZyYW1lIiwicHJvcGFnYXRlRnJhbWUiLCJhcnJheUJ1ZmZlciIsIm9wY29kZSIsIklOSVRfTU9EVUxFX1JFUSIsIlBST0NFU1NfU1RSRUFNX1BBUkFNUyIsInByZXZTdHJlYW1QYXJhbXMiLCJzdHJlYW1QYXJhbXMiLCJwcm9jZXNzU3RyZWFtUGFyYW1zIiwiUkVTRVRfU1RSRUFNIiwicmVzZXRTdHJlYW0iLCJGSU5BTElaRV9TVFJFQU0iLCJlbmRUaW1lIiwiZmluYWxpemVTdHJlYW0iLCJQUk9DRVNTX0ZSQU1FIiwiZnJhbWVTaXplIiwicHJvY2Vzc0ZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBR0EsSUFBTUEsYUFBYTtBQUNqQkMsUUFBTTtBQUNKQyxVQUFNLFNBREY7QUFFSkMsYUFBUyxJQUZMO0FBR0pDLGNBQVUsSUFITjtBQUlKQyxjQUFVO0FBSk4sR0FEVztBQU9qQkMsVUFBUTtBQUNOSixVQUFNLEtBREE7QUFFTkMsYUFBUyxJQUZIO0FBR05DLGNBQVUsSUFISjtBQUlOQyxjQUFVO0FBSko7QUFQUyxDQUFuQjs7QUFlQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFtQk1FLGE7OztBQUNKLDJCQUEwQjtBQUFBLFFBQWRDLE9BQWMsdUVBQUosRUFBSTtBQUFBOztBQUFBLG9KQUNsQlIsVUFEa0IsRUFDTlEsT0FETTs7QUFHeEIsVUFBS0MsYUFBTCxHQUFxQixNQUFLQSxhQUFMLENBQW1CQyxJQUFuQixPQUFyQjtBQUNBLFVBQUtDLFNBQUwsR0FBaUIsTUFBS0EsU0FBTCxDQUFlRCxJQUFmLE9BQWpCOztBQUVBLFVBQUtFLEdBQUwsR0FBVyxzQ0FBZ0I7QUFDekJYLFlBQU0sTUFBS1ksTUFBTCxDQUFZQyxHQUFaLENBQWdCLE1BQWhCLENBRG1CO0FBRXpCUixjQUFRLE1BQUtPLE1BQUwsQ0FBWUMsR0FBWixDQUFnQixRQUFoQjtBQUZpQixLQUFoQixDQUFYOztBQUtBLFVBQUtGLEdBQUwsQ0FBU0csRUFBVCxDQUFZLFlBQVosRUFBMEIsTUFBS04sYUFBL0I7QUFYd0I7QUFZekI7O0FBRUQ7Ozs7OytCQUNXTyxNLEVBQVE7QUFDakIsVUFBTUMsV0FBVyxLQUFLQyxXQUFMLENBQWlCQyxHQUFqQixDQUFxQixVQUFDQyxHQUFEO0FBQUEsZUFBU0EsSUFBSUMsVUFBSixFQUFUO0FBQUEsT0FBckIsQ0FBakI7QUFDQTtBQUNBLHdCQUFRQyxHQUFSLENBQVlMLFFBQVosRUFBc0JNLElBQXRCLENBQTJCLFlBQU07QUFDL0IsWUFBTUMsU0FBUyxrQkFBU0MsYUFBVCxFQUFmO0FBQ0FULGVBQU9VLElBQVAsQ0FBWUYsTUFBWjtBQUNELE9BSEQ7QUFJRDs7QUFFRDtBQUNBOzs7O29DQUNnQixDQUFFO0FBQ2xCOzs7O29DQUNnQixDQUFFO0FBQ2xCOzs7O29DQUNnQixDQUFFOztBQUVsQjs7OztpQ0FDYUcsSyxFQUFPO0FBQ2xCLFdBQUtDLFlBQUw7QUFDQSxXQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxXQUFLRSxjQUFMO0FBQ0Q7O0FBRUQ7Ozs7a0NBQ2NiLE0sRUFBUTtBQUNwQkEsYUFBT0QsRUFBUCxDQUFVLFNBQVYsRUFBcUIsS0FBS0osU0FBTCxDQUFlSyxNQUFmLENBQXJCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7OEJBSVVBLE0sRUFBUTtBQUFBOztBQUNoQixhQUFPLFVBQUNjLFdBQUQsRUFBaUI7QUFDdEIsWUFBTUMsU0FBUyxrQkFBU0EsTUFBVCxDQUFnQkQsV0FBaEIsQ0FBZjs7QUFFQSxnQkFBUUMsTUFBUjtBQUNFLGVBQUssaUJBQVFDLGVBQWI7QUFDRSxtQkFBS1gsVUFBTCxDQUFnQkwsTUFBaEI7QUFDQTtBQUNGLGVBQUssaUJBQVFpQixxQkFBYjtBQUNFLGdCQUFNQyxtQkFBbUIsa0JBQVNDLFlBQVQsQ0FBc0JMLFdBQXRCLENBQXpCO0FBQ0EsbUJBQUtNLG1CQUFMLENBQXlCRixnQkFBekI7QUFDQTtBQUNGLGVBQUssaUJBQVFHLFlBQWI7QUFDRSxtQkFBS0MsV0FBTDtBQUNBO0FBQ0YsZUFBSyxpQkFBUUMsZUFBYjtBQUNFLGdCQUFNQyxVQUFVLGtCQUFTQyxjQUFULENBQXdCWCxXQUF4QixDQUFoQjtBQUNBLG1CQUFLVyxjQUFMLENBQW9CRCxPQUFwQjtBQUNBO0FBQ0YsZUFBSyxpQkFBUUUsYUFBYjtBQUNFLGdCQUFNQyxZQUFZLE9BQUtSLFlBQUwsQ0FBa0JRLFNBQXBDO0FBQ0EsZ0JBQU1oQixRQUFRLGtCQUFTaUIsWUFBVCxDQUFzQmQsV0FBdEIsRUFBbUNhLFNBQW5DLENBQWQ7QUFDQSxtQkFBS0MsWUFBTCxDQUFrQmpCLEtBQWxCO0FBQ0E7QUFuQko7QUFxQkQsT0F4QkQ7QUF5QkQ7Ozs7O2tCQUdZcEIsYSIsImZpbGUiOiJTb2NrZXRSZWNlaXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2VMZm8gZnJvbSAnLi4vLi4vY29yZS9CYXNlTGZvJztcbmltcG9ydCB7IG9wY29kZXMsIGRlY29kZXJzLCBlbmNvZGVycyB9IGZyb20gJy4uLy4uL2NvbW1vbi91dGlscy93c1V0aWxzJztcbmltcG9ydCB7IHdzU2VydmVyRmFjdG9yeSB9IGZyb20gJy4uL3V0aWxzL3dzU2VydmVyRmFjdG9yeSc7XG5cblxuY29uc3QgcGFyYW1ldGVycyA9IHtcbiAgcG9ydDoge1xuICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICBkZWZhdWx0OiA4MDAwLFxuICAgIGNvbnN0YW50OiB0cnVlLFxuICAgIG51bGxhYmxlOiB0cnVlLFxuICB9LFxuICBzZXJ2ZXI6IHtcbiAgICB0eXBlOiAnYW55JyxcbiAgICBkZWZhdWx0OiBudWxsLFxuICAgIGNvbnN0YW50OiB0cnVlLFxuICAgIG51bGxhYmxlOiB0cnVlLFxuICB9LFxufTtcblxuLyoqXG4gKiBSZWNlaXZlIGFuIGxmbyBmcmFtZSBhcyBhIHNvY2tldCBtZXNzYWdlIGZyb20gYSBgY2xpZW50LnNpbmsuU29ja2V0U2VuZGBcbiAqIGluc3RhbmNlLlxuICpcbiAqIDxwIGNsYXNzPVwid2FybmluZ1wiPkV4cGVyaW1lbnRhbDwvcD5cblxuICogQG1lbWJlcm9mIG1vZHVsZTpub2RlLnNvdXJjZVxuICpcbiAqIEBwYXJhbXMge09iamVjdH0gb3B0aW9uc1xuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBzb2NrZXQgPSBuZXcgbGZvLnNvdXJjZS5Tb2NrZXRSZWNlaXZlKHsgcG9ydDogODAwMCB9KTtcbiAqIGNvbnN0IGxvZ2dlciA9IG5ldyBsZm8uc2luay5Mb2dnZXIoe1xuICogICB0aW1lOiB0cnVlLFxuICogICBkYXRhOiB0cnVlLFxuICogfSk7XG4gKlxuICogc29ja2V0LmNvbm5lY3QobG9nZ2VyKTtcbiAqL1xuY2xhc3MgU29ja2V0UmVjZWl2ZSBleHRlbmRzIEJhc2VMZm8ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihwYXJhbWV0ZXJzLCBvcHRpb25zKTtcblxuICAgIHRoaXMuX29uQ29ubmVjdGlvbiA9IHRoaXMuX29uQ29ubmVjdGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2Rpc3BhdGNoID0gdGhpcy5fZGlzcGF0Y2guYmluZCh0aGlzKTtcblxuICAgIHRoaXMud3NzID0gd3NTZXJ2ZXJGYWN0b3J5KHtcbiAgICAgIHBvcnQ6IHRoaXMucGFyYW1zLmdldCgncG9ydCcpLFxuICAgICAgc2VydmVyOiB0aGlzLnBhcmFtcy5nZXQoJ3NlcnZlcicpLFxuICAgIH0pO1xuXG4gICAgdGhpcy53c3Mub24oJ2Nvbm5lY3Rpb24nLCB0aGlzLl9vbkNvbm5lY3Rpb24pO1xuICB9XG5cbiAgLyoqIEBwcml2YXRlICovXG4gIGluaXRNb2R1bGUoc29ja2V0KSB7XG4gICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLm5leHRNb2R1bGVzLm1hcCgobW9kKSA9PiBtb2QuaW5pdE1vZHVsZSgpKTtcbiAgICAvLyB3YWl0IGZvciBjaGlsZHJlbiBwcm9taXNlcyBhbmQgc2VuZCBJTklUX01PRFVMRV9BQ0tcbiAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBidWZmZXIgPSBlbmNvZGVycy5pbml0TW9kdWxlQWNrKCk7XG4gICAgICBzb2NrZXQuc2VuZChidWZmZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gcHJvY2VzcyBhbnkgdHlwZVxuICAvKiogQHByaXZhdGUgKi9cbiAgcHJvY2Vzc1NjYWxhcigpIHt9XG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBwcm9jZXNzVmVjdG9yKCkge31cbiAgLyoqIEBwcml2YXRlICovXG4gIHByb2Nlc3NTaWduYWwoKSB7fVxuXG4gIC8qKiBAcHJpdmF0ZSAqL1xuICBwcm9jZXNzRnJhbWUoZnJhbWUpIHtcbiAgICB0aGlzLnByZXBhcmVGcmFtZSgpO1xuICAgIHRoaXMuZnJhbWUgPSBmcmFtZTtcbiAgICB0aGlzLnByb3BhZ2F0ZUZyYW1lKCk7XG4gIH1cblxuICAvKiogQHByaXZhdGUgKi9cbiAgX29uQ29ubmVjdGlvbihzb2NrZXQpIHtcbiAgICBzb2NrZXQub24oJ21lc3NhZ2UnLCB0aGlzLl9kaXNwYXRjaChzb2NrZXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWNvZGUgYW5kIGRpc3BhdGNoIGluY29tbWluZyBmcmFtZSBhY2NvcmRpbmcgdG8gb3Bjb2RlXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfZGlzcGF0Y2goc29ja2V0KSB7XG4gICAgcmV0dXJuIChhcnJheUJ1ZmZlcikgPT4ge1xuICAgICAgY29uc3Qgb3Bjb2RlID0gZGVjb2RlcnMub3Bjb2RlKGFycmF5QnVmZmVyKTtcblxuICAgICAgc3dpdGNoIChvcGNvZGUpIHtcbiAgICAgICAgY2FzZSBvcGNvZGVzLklOSVRfTU9EVUxFX1JFUTpcbiAgICAgICAgICB0aGlzLmluaXRNb2R1bGUoc29ja2V0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBvcGNvZGVzLlBST0NFU1NfU1RSRUFNX1BBUkFNUzpcbiAgICAgICAgICBjb25zdCBwcmV2U3RyZWFtUGFyYW1zID0gZGVjb2RlcnMuc3RyZWFtUGFyYW1zKGFycmF5QnVmZmVyKTtcbiAgICAgICAgICB0aGlzLnByb2Nlc3NTdHJlYW1QYXJhbXMocHJldlN0cmVhbVBhcmFtcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2Ugb3Bjb2Rlcy5SRVNFVF9TVFJFQU06XG4gICAgICAgICAgdGhpcy5yZXNldFN0cmVhbSgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIG9wY29kZXMuRklOQUxJWkVfU1RSRUFNOlxuICAgICAgICAgIGNvbnN0IGVuZFRpbWUgPSBkZWNvZGVycy5maW5hbGl6ZVN0cmVhbShhcnJheUJ1ZmZlcik7XG4gICAgICAgICAgdGhpcy5maW5hbGl6ZVN0cmVhbShlbmRUaW1lKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBvcGNvZGVzLlBST0NFU1NfRlJBTUU6XG4gICAgICAgICAgY29uc3QgZnJhbWVTaXplID0gdGhpcy5zdHJlYW1QYXJhbXMuZnJhbWVTaXplO1xuICAgICAgICAgIGNvbnN0IGZyYW1lID0gZGVjb2RlcnMucHJvY2Vzc0ZyYW1lKGFycmF5QnVmZmVyLCBmcmFtZVNpemUpO1xuICAgICAgICAgIHRoaXMucHJvY2Vzc0ZyYW1lKGZyYW1lKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU29ja2V0UmVjZWl2ZTtcbiJdfQ==